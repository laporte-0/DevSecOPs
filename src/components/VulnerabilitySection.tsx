import { useState } from "react";
import { AlertOctagon, AlertTriangle, AlertCircle } from "lucide-react";

type VulnerabilityLevel = "critical" | "medium" | "low";

interface Vulnerability {
  id: string;
  level: VulnerabilityLevel;
  file: string;
  package: string;
  fix: string;
  type: string;
  description: string;
}

interface Props {
  vulnerabilities: readonly Vulnerability[];
}

export default function VulnerabilitySection({ vulnerabilities }: Props) {
  const [filter, setFilter] = useState<VulnerabilityLevel | "all">("all");

  const icons = {
    critical: <AlertOctagon className="text-red-600 w-4 h-4" />,
    medium: <AlertTriangle className="text-yellow-600 w-4 h-4" />,
    low: <AlertCircle className="text-blue-600 w-4 h-4" />,
  };

  const filteredVulns =
    filter === "all"
      ? vulnerabilities
      : vulnerabilities.filter((v) => v.level === filter);

  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow border dark:border-gray-700">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold">üõ†Ô∏è Vuln√©rabilit√©s d√©tect√©es</h2>

        <div className="space-x-2 text-sm">
          {(["all", "critical", "medium", "low"] as const).map((lvl) => (
            <button
              key={lvl}
              onClick={() => setFilter(lvl)}
              className={`px-3 py-1 rounded-full border text-xs font-medium ${
                filter === lvl
                  ? "bg-blue-600 text-white"
                  : "text-gray-700 dark:text-gray-200 border-gray-300 dark:border-gray-600"
              }`}
            >
              {lvl === "all"
                ? "Toutes"
                : lvl.charAt(0).toUpperCase() + lvl.slice(1)}
            </button>
          ))}
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full text-sm text-left border-collapse">
          <thead className="text-xs uppercase bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300">
            <tr>
              <th className="px-4 py-2">Niveau</th>
              <th className="px-4 py-2">Package</th>
              <th className="px-4 py-2">Fichier</th>
              <th className="px-4 py-2">Type</th>
              <th className="px-4 py-2">Description</th>
              <th className="px-4 py-2">Correctif</th>
            </tr>
          </thead>
          <tbody>
            {filteredVulns.map((vuln) => (
              <tr key={vuln.id} className="border-t dark:border-gray-700">
                <td className="px-4 py-2">{icons[vuln.level]}</td>
                <td className="px-4 py-2 font-medium">{vuln.package}</td>
                <td className="px-4 py-2">{vuln.file}</td>
                <td className="px-4 py-2">{vuln.type}</td>
                <td className="px-4 py-2">{vuln.description}</td>
                <td className="px-4 py-2 text-blue-600">{vuln.fix}</td>
              </tr>
            ))}
          </tbody>
        </table>

        {filteredVulns.length === 0 && (
          <p className="text-center text-sm text-gray-500 mt-4">
            Aucune vuln√©rabilit√© √† ce niveau.
          </p>
        )}
      </div>
    </div>
  );
}
