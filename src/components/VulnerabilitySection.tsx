import { useState } from "react";
import { Dialog } from "@headlessui/react";

interface Vulnerability {
  id: string;
  level: string;
  file: string;
  package: string;
  fix: string;
  type: string;
  description: string;
}

interface Props {
  vulnerabilities: Vulnerability[];
}

export default function VulnerabilitySection({ vulnerabilities }: Props) {
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [isOpen, setIsOpen] = useState(false);
  const [copied, setCopied] = useState(false);

  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">üõ°Ô∏è Detected Vulnerabilities</h2>
      {vulnerabilities.map((vuln) => (
        <div
          key={vuln.id}
          className="flex justify-between items-center bg-white border p-4 rounded-lg shadow-sm cursor-pointer"
          onClick={() => {
            setSelectedVuln(vuln);
            setIsOpen(true);
          }}
        >
          <div>
            <p className="font-semibold text-red-700">{vuln.package}</p>
            <p className="text-xs text-gray-600">
              Type: {vuln.type} | File: {vuln.file} | Level: {vuln.level}
            </p>
          </div>
          <button className="text-sm text-blue-600 hover:underline">
            View Details
          </button>
        </div>
      ))}

      <Dialog
        open={isOpen}
        onClose={() => setIsOpen(false)}
        className="fixed inset-0 z-50 overflow-y-auto"
      >
        <div className="flex items-center justify-center min-h-screen px-4">
          <div
            className="fixed inset-0 bg-black opacity-30"
            aria-hidden="true"
          ></div>
          <div className="bg-white rounded-lg p-6 z-50 max-w-md w-full relative">
            <Dialog.Title className="text-lg font-bold mb-2">
              Vulnerability Detail
            </Dialog.Title>
            {selectedVuln && (
              <div className="space-y-2 text-sm">
                <p>
                  <strong>Package:</strong> {selectedVuln.package}
                </p>
                <p>
                  <strong>Level:</strong> {selectedVuln.level}
                </p>
                <p>
                  <strong>File:</strong> {selectedVuln.file}
                </p>
                <p>
                  <strong>Type:</strong> {selectedVuln.type}
                </p>
                <p>
                  <strong>Description:</strong> {selectedVuln.description}
                </p>
                <p>
                  <strong>Fix:</strong> {selectedVuln.fix}
                </p>
                <button
                  onClick={() => {
                    navigator.clipboard.writeText(selectedVuln.fix);
                    setCopied(true);
                    setTimeout(() => setCopied(false), 2000);
                  }}
                  className="mt-2 inline-block text-xs text-blue-600 underline hover:text-blue-800"
                >
                  üìã Copy fix command
                </button>
                {copied && (
                  <p className="text-green-600 text-xs">‚úî Command copied!</p>
                )}
                <button
                  onClick={() =>
                    alert(
                      "This vulnerability has been marked as a false positive."
                    )
                  }
                  className="block text-xs text-gray-500 underline hover:text-gray-700 mt-1"
                >
                  üö´ Mark as false positive
                </button>
              </div>
            )}
            <div className="mt-4 text-right">
              <button
                onClick={() => setIsOpen(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </Dialog>
    </div>
  );
}
